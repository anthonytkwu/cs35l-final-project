User Registeration:
    Actions: POST
    URL: api/user/register/
    Request (DOES NOT REQUIRE AUTH):
        {
        "username": "urname",
        "password": "somepassword"
        }
    Response:
        {
            "id": 4,
            "username": "urname",
            "password": "pbkdf2_sha256$720000$ShxF3kDmSt4iN4wE2gRcAN$AdkzARb2i5SosJwVQ+2Utmfru+2FAOZgglvDJn5Kywo="
        }

User Login:
    Actions: POST
    URL: api/user/login/
    Request (DOES NOT REQUIRE AUTH):
        {
        "username": "urname",
        "password": "somepassword"
        }
    Response:
        {
            "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxNzY2NjQ5NywiaWF0IjoxNzE3NTgwMDk3LCJqdGkiOiI0MzUxMzQwMTQ2ZTE0NGYxYjRhZmE5MTZlYmMwMTE5NSIsInVzZXJfaWQiOjF9.Rj4AL3D3CwoVzgoi6JKLp9_BjW5WfF_Aka-oJQnJ5UA",
            "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE3NTgxODk3LCJpYXQiOjE3MTc1ODAwOTcsImp0aSI6IjkwNmE5YTQ2NDU4NzQzMWY5ZmIxZDBkOWZmZTM2NzhlIiwidXNlcl9pZCI6MX0.zPeRd92dDsJND-ipK_mIAX2Cv4zX6VCwj_2uX0h-sZc"
        }
    Error Response:
        {
            "detail": "No active account found with the given credentials"
        }

Token Refresh:
    Actions: POST
    URL: api/user/refresh/
    Request (DOES NOT REQUIRE AUTH):
        {
            "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxNzY2NjQ5NywiaWF0IjoxNzE3NTgwMDk3LCJqdGkiOiI0MzUxMzQwMTQ2ZTE0NGYxYjRhZmE5MTZlYmMwMTE5NSIsInVzZXJfaWQiOjF9.Rj4AL3D3CwoVzgoi6JKLp9_BjW5WfF_Aka-oJQnJ5UA"
        }
    Response:
        {
            "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE3NTgyMDc3LCJpYXQiOjE3MTc1ODAwOTcsImp0aSI6ImI1M2FlZDRhMzcwMzQyMzNiZmYyNGZjZDliNjFhYjAxIiwidXNlcl9pZCI6MX0.2QysdV2JkLObSPMxOujHRrucALMQTKaAGduZhYXLHlQ"
        }
    Error Response:
        {
            "detail": "Token is invalid or expired",
            "code": "token_not_valid"
        }

Session Creation:
    Actions: POST
    URL: api/session/create/
    Request:
        {"draw_time": 30, "desc_time": 30}
    Response:
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-1,
            "last_modified":"2024-06-05T09:40:05.224297Z",
            "users":["testuser2"],
            "chains":[]
        }

Session Join:
    Actions: GET
    URL: api/session/<str:game_code>/info/
    Request:
        {}
    Response:
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-1,
            "last_modified":"2024-06-05T09:40:05.224297Z",
            "users":["testuser1",
            "testuser2"],
            "chains":[]
        }

Session Info When Change:
    Actions: POST
    URL: api/session/<str:game_code>/wait/
    Request:
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-1,
            "last_modified":"2024-06-05T09:40:05.224297Z",
            "users":["testuser1",
            "testuser2"],
            "chains":[]
        }
    Response:
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-1,
            "last_modified":"2024-06-05T09:40:05.224297Z",
            "users":["testuser1","testuser2","testuser3"], # NOTE THERE IS A NEW USER JOINING THE SESSION! AFTER TIME OUT (10 seconds) THE SERVER WILL PROVIDE A RESPONSE AND IT MAY LOOK EXACTLY THE SAME
            "chains":[]
        }

Session Info:
    Actions: GET
    URL: api/session/<str:game_code>/info/
    Request:
        {}
    Response (in lobby):
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-1,
            "last_modified":"2024-06-05T09:40:05.224297Z",
            "users":["testuser1","testuser2","testuser3"],
            "chains":[]
        }
    Response (in session):
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":0,
            "last_modified":"2024-06-05T10:23:06.208955Z",
            "users":["testuser1","testuser2","testuser3"],
            "chains":[{"testuser2":13},{"testuser3":14},{"testuser1":15}]
        }
    Response (end of game):
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":-2,
            "last_modified":"2024-06-05T10:29:27.715387Z",
            "users":["testuser1","testuser2","testuser3"],
            "chains":{
                        "13":["testuser2","testuser3","testuser1"], <- chain 13 had testuser2 round=0 (desc), testuser3 for round=1 (drawing), etc
                        "14":["testuser3","testuser1","testuser2"],
                        "15":["testuser1","testuser2","testuser3"]
                     }
        }

Session Start:
    Actions: PUT
    URL: api/session/<str:game_code>/start/
    Request:
        {}
    Response:
        {
            "game_code":145078,
            "draw_time":30,
            "desc_time":30,
            "created_at":"2024-06-05T09:40:05.224256Z",
            "round":0,
            "last_modified":"2024-06-05T10:23:06.208955Z",
            "users":["testuser1","testuser2","testuser3"],
            "chains":[{"testuser2":13},{"testuser3":14},{"testuser1":15}] <- this means testuser2 is on chain_id=13, test_user3 is on chain_id=14, etc for round=0
        }
    (requires 3 or more people to be in the session, game must have not started yet)
    
Upload Drawing:
    Actions: POST
    -H "Content-Type: multipart/form-data"
    URL: api/session/<str:game_code>/<int:round>/<int:chain>/draw/
    Request:
        {}
    Form Data:
        drawing=@/path/to/your/svg/img.svg
    Response:
        {}

Upload Description:
    Actions: POST
    URL: api/session/<str:game_code>/<int:round>/<int:chain>/draw/
    Request:
        {"description": "this is a test description of the drawing lol"}
    Response:
        {
            "id":8,
            "description":"test",
            "created_at":"2024-06-06T06:55:21.722270Z",
            "chain":10,
            "author":"testuser2"
        }

Get Drawing Information:
    Actions: GET
    URL: api/session/<str:game_code>/<int:round>/<int:chain>/getDraw/
    Request:
        {}
    Response (example: http://127.0.0.1:8000/api/session/145078/1/13/getDraw/):
        {
            "id":20,
            "drawing":"http://localhost:8000/media/13_145078_1.svg",
            "created_at":"2024-06-05T11:07:59.426722Z",
            "chain":13,
            "author":"testuser3"
        }
    Note: Say now it's round 2, which is a description round since it is an even round.
          You make an api request (Session Info When Change) and find out that you are 
          on chain 2 for this round. Thus, you need to make an api call that asks for the
          drawing of the previous round in the chain. Hence, you make the call to this URL:
          api/session/<str:game_code>/1/2/getDraw/.
          This call only gives you information about the image, including the fact that the
          drawing is located at the URL provided.

Get Drawing Media:
    Actions: GET
    URL: use whatever was given to you from Drawing Information (typically media/{some file name})
    Request:
        {}
    Response is just the file.

Get Description:
    Actions: GET
    URL:
    Request:
        {}
    Response:
        {
            "id":8,
            "description":"test",
            "created_at":"2024-06-06T06:55:21.722270Z",
            "chain":10,
            "author":"testuser2"
        }